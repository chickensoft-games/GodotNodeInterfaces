name: '📦 Publish'
on:
  workflow_dispatch:
    branches:
      - main
    inputs:
      bump:
        description: "Version Bump Method"
        type: choice
        options:
          - major
          - minor
          - patch
        required: true
  workflow_call:
    secrets:
      NUGET_API_KEY:
        description: "NuGet API Key"
        required: true
    inputs:
      bump:
        description: "Version Bump Method"
        type: string
        required: true

jobs:
  publish:
    name: 📦 Publish
    runs-on: ubuntu-latest
    steps:
      - name: 🧾 Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: 'recursive'

      - name: 🔎 Read Current Project Version
        uses: KageKirin/get-csproj-version@v1.0.0
        id: current-version
        with:
          file: Chickensoft.GodotNodeInterfaces/Chickensoft.GodotNodeInterfaces.csproj
          xpath: /Project/PropertyGroup/Version

      - name: 🖨 Print Current Version
        run: |
          echo "Current Version: ${{ steps.current-version.outputs.version }}"

      - name: 🧮 Compute Next Version
        uses:  chickensoft-games/next-godot-csproj-version@v1
        id: next-version
        with:
          project-version: ${{ steps.current-version.outputs.version }}
          godot-version: global.json
          bump: ${{ inputs.bump }}

      - name: ✨ Print Next Version
        run: |
          echo "Next Version: ${{ steps.next-version.outputs.version }}"

      - name: 📝 Change Version
        uses: vers-one/dotnet-project-version-updater@v1.3
        with:
          file: "Chickensoft.GodotNodeInterfaces/Chickensoft.GodotNodeInterfaces.csproj"
          version:  ${{ steps.next-version.outputs.version }}

      - name: 💽 Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          # Use the .NET SDK from global.json in the root of the repository.
          global-json-file: global.json

      - name: 📦 Restore All Packages
        run: |
          dotnet restore

      - name: 🛠 Build All Projects
        run: |
          dotnet build --configuration Release --no-restore

      - name: 🧬 Run Generator
        working-directory: Chickensoft.GodotNodeInterfacesGenerator
        run: |
          dotnet run

      - name: 🧪 Verify Generated Files Exist
        run: |
          # We want to verify that at least 200 files exist in Chickensoft.GodotNodeInterfaces/src/adapters
          # and in Chickensoft.GodotNodeInterfaces/src/interfaces

          # count the number of files in the adapters directory
          adapter_count=$(find Chickensoft.GodotNodeInterfaces/src/adapters -type f | wc -l)

          # count the number of files in the interfaces directory
          interface_count=$(find Chickensoft.GodotNodeInterfaces/src/interfaces -type f | wc -l)

          if [ "$adapter_count" -lt 200 ]; then
            echo "❌ Adapter count is less than 200"
            exit 1
          elif [ "$interface_count" -lt 200 ]; then
            echo "❌ Interface count is less than 200"
            exit 1
          else
            echo "✅ Generated "$adapter_count" adapters and "$interface_count" interfaces!
          fi

      - name: 👩‍🔬 Verify Generated Types Build
        run: |
          dotnet build

      # - name: 📦 Publish
      #   run: |
      #     # build the package
      #     dotnet build Chickensoft.GodotNodeInterfaces/Chickensoft.GodotNodeInterfaces.csproj -c Release

      #     # find the built nuget package
      #     nuget_package=$(find . -name "Chickensoft.GodotNodeInterfaces.*.nupkg")

      #     echo "📦 Publishing package: $nuget_package"

      #     # publish the nuget package
      #     dotnet nuget push "$nuget_package" --api-key "${{ secrets.NUGET_API_KEY }}" --source "https://api.nuget.org/v3/index.json" --skip-duplicate

      # - name: ✍️ Commit Changes
      #   run: |
      #     git config user.name "action@github.com"
      #     git config user.email "GitHub Action"
      #     git commit -a -m "chore(version): update version to ${{ steps.next-version.outputs.version }}"
      #     git push

      # - name: ✨ Create Release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: gh release create --generate-notes "v${{ steps.next-version.outputs.version }}"
